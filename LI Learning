select firstName, lastName, title
From employee
Limit 5

SELECT * from employee

Select model, EngineType
from model
LIMIT 5

SELECT sql
from sqlite_schema
where name = 'employee'

select emp.employeeId, emp.firstName, emp.lastName, emp.managerId,
mng.firstName AS MgrFirstName, mng.lastName AS MgrLastName
from employee emp
inner JOIN employee mng
on emp.managerId=mng.employeeId
ORDER BY emp.employeeId

SELECT emp.firstName, emp.lastName, sls.salesId, sls.salesAmount 
FROM employee emp
LEFT JOIN sales sls
on emp.employeeId=sls.employeeId
where emp.title='Sales Person'
AND sls.salesId ISNULL

/* Not the right solution :( */
SELECT cust.customerId, cust.firstName, cust.lastName, 
sls.salesId, sls.inventoryId, sls.customerId, sls.employeeId, sls.salesAmount, sls.soldDate
FROM customer cust
LEFT JOIN sales sls
on cust.customerId=sls.customerId

/* Using Unions*/
SELECT cust.customerId, cust.firstName, cust.lastName, 
sls.salesId, sls.inventoryId, sls.customerId, sls.employeeId, sls.salesAmount, sls.soldDate
FROM customer cust
INNER JOIN sales sls
on cust.customerId=sls.customerId
UNION

SELECT cust.customerId, cust.firstName, cust.lastName, 
sls.salesId, sls.inventoryId, sls.customerId, sls.employeeId, sls.salesAmount, sls.soldDate
FROM customer cust
LEFT JOIN sales sls
on cust.customerId=sls.customerId
where sls.salesAmount ISNULL 
UNION

SELECT cust.customerId, cust.firstName, cust.lastName, 
sls.salesId, sls.inventoryId, sls.customerId, sls.employeeId, sls.salesAmount, sls.soldDate
FROM sales sls
LEFT JOIN customer cust
on sls.customerId=cust.customerId
where cust.customerId ISNULL

-- How many cars has been sold per employee
SELECT emp.employeeId, emp.firstName, emp.lastName
FROM sales sls
INNER JOIN employee emp
on sls.employeeId=emp.employeeId

SELECT emp.employeeId, emp.firstName, emp.lastName, count(*) as NumOfCarsSold
FROM sales sls
INNER JOIN employee emp
on sls.employeeId=emp.employeeId
Group by emp.employeeId, emp.firstName, emp.lastName
Order by NumOfCarsSold DESC

--Most & Least expensive car sold by employee this year
select * from sales
LIMIT 100

select max(soldDate), min(soldDate) from sales

SELECT emp.employeeId, emp.firstName, emp.lastName, max(salesAmount), min(salesAmount)
from sales sls
INNER JOIN employee emp
on sls.employeeId=emp.employeeId
where sls.soldDate BETWEEN '2023-01-01 00:00:00' and '2023-12-31 00:00:00'
--where sls.soldDate>= date('now','start of year')
group by sls.employeeId

--Employees with more than 5 cars sold this year
SELECT emp.employeeId, emp.firstName, emp.lastName, count(*) as NumOfCarsSold
FROM sales sls
INNER JOIN employee emp
on sls.employeeId=emp.employeeId
where sls.soldDate BETWEEN '2023-01-01 00:00:00' and '2023-12-31 00:00:00'
Group by emp.employeeId, emp.firstName, emp.lastName
HAVING count(*) > 5

--Total Sales per Year

/*not correct solutions
select Sum(salesAmount) as '2021 Sales' from sales
where soldDate BETWEEN '2021-01-01 00:00:00' and '2021-12-31 00:00:00' 
UNION

select Sum(salesAmount) as '2022 Sales' from sales
where soldDate BETWEEN '2022-01-01 00:00:00' and '2022-12-31 00:00:00' 
UNION

select Sum(salesAmount) as '2023 Sales' from sales
where soldDate BETWEEN '2023-01-01 00:00:00' and '2023-12-31 00:00:00' 
*/

WITH cte AS (
SELECT strftime('%Y',soldDate) AS SoldYear,
  salesAmount
FROM sales
)
SELECT SoldYear,
  FORMAT("$%.2f", sum(salesAmount)) AS AnnualSales
FROM cte 
GROUP BY SoldYear
ORDER BY SoldYear

--Sales per Employee per Month for 2021
SELECT employeeId, salesAmount, strftime('%m',soldDate) AS SoldMonth
FROM sales
WHERE soldDate BETWEEN '2021-01-01 00:00:00' and '2021-12-31 00:00:00' 
ORDER BY employeeId

SELECT emp.firstName, emp.lastName,
  CASE WHEN strftime('%m', soldDate) = '01'
      THEN salesAmount END AS JanSales,
  CASE WHEN strftime('%m', soldDate) = '02'
      THEN salesAmount END AS FebSales,
  CASE WHEN strftime('%m', soldDate) = '03'
      THEN salesAmount END AS MarSales,
  CASE WHEN strftime('%m', soldDate) = '04'
      THEN salesAmount END AS AprSales,
  CASE WHEN strftime('%m', soldDate) = '05'
      THEN salesAmount END AS MaySales,
  CASE WHEN strftime('%m', soldDate) = '06'
      THEN salesAmount END AS JunSales,
  CASE WHEN strftime('%m', soldDate) = '07'
      THEN salesAmount END AS JulSales,
  CASE WHEN strftime('%m', soldDate) = '08'
      THEN salesAmount END AS AugSales,
  CASE WHEN strftime('%m', soldDate) = '09'
      THEN salesAmount END AS SepSales,
  CASE WHEN strftime('%m', soldDate) = '10'
      THEN salesAmount END AS OctSales,
  CASE WHEN strftime('%m', soldDate) = '11'
      THEN salesAmount END AS NovSales,
  CASE WHEN strftime('%m', soldDate) = '12'
      THEN salesAmount END AS DecSales
FROM sales sls
INNER JOIN employee emp
  ON sls.employeeId = emp.employeeId
WHERE soldDate BETWEEN '2021-01-01 00:00:00' and '2021-12-31 00:00:00' 
GROUP BY emp.firstname, emp.lastname

--Find all Electric Car Sales
.tables

select * from sales
LIMIT 100

SELECT * from model
LIMIT 100

SELECT * from inventory
LIMIT 100

SELECT sls.employeeId, sls.salesAmount, sls.soldDate, mod.EngineType
FROM sales sls
INNER JOIN inventory inv
on sls.inventoryId=inv.inventoryId
INNER JOIN model mod
on inv.modelId=mod.modelId
WHERE EngineType='Electric'

--Book answer:
SELECT sls.soldDate, sls.salesAmount, inv.colour, inv.year
FROM sales sls
INNER JOIN inventory inv
  ON sls.inventoryId = inv.inventoryId
WHERE inv.modelId IN (
  SELECT modelId
  FROM model
  WHERE EngineType = 'Electric'
)

--List of Sales People and Rank the cars they've sold the most of
.tables

select * from sales
LIMIT 100

select * from model
LIMIT 100

--stab
SELECT sls.employeeId, sls.salesAmount, mod.model
FROM sales sls
INNER JOIN inventory inv
on sls.inventoryId=inv.inventoryId
INNER JOIN model mod
on inv.modelId=mod.modelId
ORDER BY employeeId, model

-- apply the grouping
SELECT emp.firstName, emp.lastName, mdl.model,
  count(model) AS NumberSold
FROM sales sls
INNER JOIN employee emp
  ON sls.employeeId = emp.employeeId
INNER JOIN inventory inv
  ON inv.inventoryId = sls.inventoryId
INNER JOIN model mdl
  ON mdl.modelId = inv.modelId
GROUP BY emp.firstName, emp.lastName, mdl.model

-- add in the windowing function
SELECT emp.firstName, emp.lastName, mdl.model,
  count(model) AS NumberSold,
  rank() OVER (PARTITION BY sls.employeeId 
              ORDER BY count(model) desc) AS Rank
FROM sales sls
INNER JOIN employee emp
  ON sls.employeeId = emp.employeeId
INNER JOIN inventory inv
  ON inv.inventoryId = sls.inventoryId
INNER JOIN model mdl
  ON mdl.modelId = inv.modelId
GROUP BY emp.firstName, emp.lastName, mdl.model

--Total Sales per Month & Annual Running Total
select * from sales
LIMIT 100

--stab
SELECT salesAmount, strftime('%m',soldDate) AS SoldMonth, strftime('%Y',soldDate) AS SoldYear
FROM sales
GROUP BY SoldYear, SoldMonth

-- add the window function - simplify with cte
with cte_sales as (
SELECT strftime('%Y', soldDate) AS soldYear, 
  strftime('%m', soldDate) AS soldMonth,
  salesAmount
FROM sales
GROUP BY soldYear, soldMonth
)
SELECT soldYear, soldMonth, salesAmount,
  SUM(salesAmount) OVER (
    PARTITION BY soldYear 
    ORDER BY soldYear, soldMonth) AS AnnualSales_RunningTotal
FROM cte_sales
ORDER BY soldYear, soldMonth

--Number of Cars Sold this Month and last Month
select * from sales
LIMIT 100

--guess I misunderstood prompt, really a comparison
SELECT strftime('%Y-%m',soldDate) AS SoldMonth, count(*) as NumOfCarsSold
FROM sales
where soldDate BETWEEN '2022-09-01 00:00:00' AND '2022-10-31 00:00:00'
GROUP BY SoldMonth

-- Apply the window function
SELECT strftime('%Y-%m', soldDate) AS MonthSold,
  COUNT(*) AS NumberCarsSold,
  LAG (COUNT(*), 1, 0 ) OVER calMonth AS LastMonthCarsSold --very neat lookback
FROM sales
GROUP BY strftime('%Y-%m', soldDate)
WINDOW calMonth AS (ORDER BY strftime('%Y-%m', soldDate))
ORDER BY strftime('%Y-%m', soldDate)
